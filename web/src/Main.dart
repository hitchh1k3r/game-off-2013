library gitfighter;

import 'dart:html';
import 'dart:web_gl';
import 'dart:web_audio';
import 'dart:typed_data';
import 'dart:async';
import 'dart:convert';
import 'dart:math';
import 'dart:collection';
import 'dart:js';

part 'Shaders.dart';
part 'Geometry.dart';
part 'VectorMath.dart';
part 'Sounds.dart';
part 'GameStates.dart';
part 'Node.dart';
part 'Camera.dart';
part 'TextureCache.dart';
part 'MyMath.dart';
part 'Entites.dart';

const bool DEBUG = false;
const int TICKRATE = 20;
const String CREDITS = 'gathering the bits you begin working, and finally with your last changes pushed,\nthe bits are woven together into a game.||||\nCongratulations!||||\n\n\n\n\n                            C|R|E|D|I|T|S|\n|\n|\n|\n|\n|\nCode||\n  GLSL Simplex Noise Functions by\n    <a href="https://github.com/ashima/webgl-noise">Ian McEwan, Ashima Arts. - MIT License</a>||\n  Referances and Inspiration\n    <a href="https://github.com/emoller/WebGL101">WebGL 101 by Erik J MÃ¶ller (MIT License)</a>||\n    <a href="http://www.gizma.com/easing/">Easing Equations by Robert Penner (BSD License)</a>||\n\n  Congratulations to Dart on it\'s official release!||\n  This game was made for HTML5 (WebGL and WebAudio) using|\n    HTML, CSS, Dart, JavaScript, and PHP.||||||\n|\n|\n|\n|\n|\n|\n|\n|\nGraphics||\n  Sound Control Icons and\n  Bit, Laser, Crosshair, Trail, and Explosion Sprites by\n    HitchH1k3r - <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0 License</a>||\n  Space Ship and Asteroid Sprites by\n    <a href="http://opengameart.org/content/shmup-ships">surt - CC-BY-SA 3.0 License</a>||\n  3D Asteroid Textures by\n    <a href="http://opengameart.org/content/29-grounds-and-walls-and-water-1024x1024">Mysteryem - CC-BY-SA 3.0 License</a>||\n  3D Space Ship Diffuse Textures by\n    <a href="http://opengameart.org/content/40-free-metal-textures-from-mtc-sets">rubberduck - CC0 License</a>||\n  3D Space Ship Emmissive Textures by\n    <a href="http://opengameart.org/content/space-skyboxes">arikel - CC0 License</a>||||||\n|\n|\n|\n|\n|\n|\n|\n|\nSounds||\n  8-Bit Sounds generated by\n    <a href="http://www.bfxr.net/">Bfxr.</a>||\n  Laser and\n  Space Trash (Get Bit) by\n    <a href="http://opengameart.org/content/63-digital-sound-effects-lasers-phasers-space-etc">Kenney.nl - CC-BY 3.0 License</a>||\n  MenuSelection Click (Menu Hover) by\n    <a href="http://opengameart.org/content/menu-selection-click">NenadSimic - CC-BY 3.0 License</a>||\n  Get Ruby (Upgrade Select) by\n    <a href="http://opengameart.org/content/get-ruby-se">mieki256 - CC0 License</a>||\n  Boom (Explosion) by\n    <a href="http://opengameart.org/content/boom-pack-1">dklon - CC-BY 3.0 License</a>||\n  Annulet of absorption (Last Bit/Level Up) by\n    <a href="http://www.freesound.org/people/CosmicD/sounds/133008/">CosmicD - CC-BY 3.0 License</a>||||||\n|\n|\n|\n|\n|\n|\n|\n|\nMusic||\n  Chaoz Fantasy (8-Bit) and\n  Chaoz Fantasy by\n    <a href="https://soundcloud.com/paragonx9/">ParagonX9 - CC-BY-NC-SA 3.0 License</a>||\n  A Trip To The Future by\n    <a href="http://www.newgrounds.com/audio/listen/521311">DJ A.H. - CC-BY-NC-SA 3.0 License</a>||||||\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n                           T|H|A|N|K| Y|O|U| F|O|R| P|L|A|Y|I|N|G|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n';

int creditsIndex = 0;
int creditsCooldown = 0;

Random random = new Random();
CanvasElement canvas;
RenderingContext gl;
MatrixStack matrixStack;
TextureCache textureCache;
Program programStandard;
Program programBackground;
Program programGUI;
int attribVertexPosition;
int attribVertexNormal;
int attribVertexTextureCoord;
UniformLocation uniformRender3D;
UniformLocation uniformUseTexture;
UniformLocation uniformRed;
UniformLocation uniformGreen;
UniformLocation uniformBlue;
UniformLocation uniformMMatrix;
UniformLocation uniformVMatrix;
UniformLocation uniformPMatrix;
UniformLocation uniformSpriteSampler;
UniformLocation uniformDiffuseSampler;
UniformLocation uniformEmissiveSampler;
UniformLocation uniformAlpha;

Buffer screenRectBuffer;
int attribBackgroundVertex;
UniformLocation uniformBackgroundVMatrix;
UniformLocation uniformBackgroundRender3D;
UniformLocation uniformBackgroundUseTextures;
UniformLocation uniformBackgroundAspect;
UniformLocation uniformBackgroundCircleSize;
UniformLocation uniformbackgroundIsIn;

Texture numberSprites;
Buffer numberRectBuffer;
Buffer number0UVBuffer;
Buffer number1UVBuffer;
int attribGUIVertexPosition;
int attribGUIVertexTextureCoord;
UniformLocation uniformGUISpriteSampler;
UniformLocation uniformGUIXOffset;
UniformLocation uniformGUIYOffset;

Geometry asteroid1;
Geometry asteroid2;
Geometry asteroid3;
Geometry asteroid4;
Geometry asteroid5;
Geometry laserBlast;
Geometry evilLaser;
Crosshair crosshair;
Geometry ufoGeometry;

Billboard bitSprite = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [], [new Rectangle(32, 0, 16, 16),
                                                                                              new Rectangle(48, 0, 16, 16),
                                                                                              new Rectangle(64, 0, 16, 16),
                                                                                              new Rectangle(80, 0, 16, 16),
                                                                                              new Rectangle(96, 0, 16, 16),
                                                                                              new Rectangle(112, 0, 16, 16)]);
Billboard bigBitSprite = new Billboard(new BoundingBox(128.0, 128.0, 128.0, 64.0, 64.0, 64.0), [], [new Rectangle(32, 0, 16, 16),
                                                                                              new Rectangle(48, 0, 16, 16),
                                                                                              new Rectangle(64, 0, 16, 16),
                                                                                              new Rectangle(80, 0, 16, 16),
                                                                                              new Rectangle(96, 0, 16, 16),
                                                                                              new Rectangle(112, 0, 16, 16)]);
Billboard asteroid1Part1 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.48294118, 0.41960784, 0.41862745)],
    [new Rectangle(160, 16, 16, 16)]);
Billboard asteroid1Part2 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.48294118, 0.41960784, 0.41862745)],
    [new Rectangle(160, 32, 16, 16)]);
Billboard asteroid1Part3 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.48294118, 0.41960784, 0.41862745)],
    [new Rectangle(160, 48, 16, 16)]);
Billboard asteroid2Part1 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.75294118, 0.41960784, 0.26862745)],
    [new Rectangle(224, 16, 16, 16)]);
Billboard asteroid2Part2 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.75294118, 0.41960784, 0.26862745)],
    [new Rectangle(224, 32, 16, 16)]);
Billboard asteroid2Part3 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.75294118, 0.41960784, 0.26862745)],
    [new Rectangle(224, 48, 16, 16)]);
Billboard asteroid3Part1 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.55294118, 0.41960784, 0.36862745)],
    [new Rectangle(288, 16, 16, 16)]);
Billboard asteroid3Part2 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.55294118, 0.41960784, 0.36862745)],
    [new Rectangle(288, 32, 16, 16)]);
Billboard asteroid3Part3 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.55294118, 0.41960784, 0.36862745)],
    [new Rectangle(288, 48, 16, 16)]);
Billboard asteroid4Part1 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.36862745, 0.41960784, 0.65294118)],
    [new Rectangle(160, 96, 16, 16)]);
Billboard asteroid4Part2 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.36862745, 0.41960784, 0.65294118)],
    [new Rectangle(160, 112, 16, 16)]);
Billboard asteroid4Part3 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.36862745, 0.41960784, 0.65294118)],
    [new Rectangle(160, 128, 16, 16)]);
Billboard asteroid5Part1 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.41960784, 0.60294118, 0.36862745)],
    [new Rectangle(224, 96, 16, 16)]);
Billboard asteroid5Part2 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.41960784, 0.60294118, 0.36862745)],
    [new Rectangle(224, 112, 16, 16)]);
Billboard asteroid5Part3 = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.41960784, 0.60294118, 0.36862745)],
    [new Rectangle(224, 128, 16, 16)]);
Billboard trailSprite = new Billboard(new BoundingBox(8.0, 8.0, 8.0, 4.0, 4.0, 4.0), [new Color(0.15, 0.15, 0.6)],
    [new Rectangle(160, 0, 16, 16)]);
Billboard evilTrailSprite = new Billboard(new BoundingBox(8.0, 8.0, 8.0, 4.0, 4.0, 4.0), [new Color(0.6, 0.15, 0.15)],
    [new Rectangle(272, 0, 16, 16)]);
Billboard bitRadiation = new Billboard(new BoundingBox(8.0, 8.0, 8.0, 4.0, 4.0, 4.0), [new Color(0.75, 0.75, 0.1), new Color(0.8, 0.6, 0.1),
new Color(0.75, 0.75, 0.5), new Color(0.6, 0.8, 0.1), new Color(0.5, 0.5, 0.2), new Color(0.8, 0.2, 0.5)], [new Rectangle(32, 0, 16, 16),
                                                                                                            new Rectangle(48, 0, 16, 16),
                                                                                                            new Rectangle(64, 0, 16, 16),
                                                                                                            new Rectangle(80, 0, 16, 16),
                                                                                                            new Rectangle(96, 0, 16, 16),
                                                                                                            new Rectangle(112, 0, 16, 16)]);
Billboard bigBitRadiation = new Billboard(new BoundingBox(32.0, 32.0, 32.0, 16.0, 16.0, 16.0), [new Color(0.75, 0.75, 0.1), new Color(0.8, 0.6, 0.1),
new Color(0.75, 0.75, 0.5), new Color(0.6, 0.8, 0.1), new Color(0.5, 0.5, 0.2), new Color(0.8, 0.2, 0.5)], [new Rectangle(32, 0, 16, 16),
                                                                                                            new Rectangle(48, 0, 16, 16),
                                                                                                            new Rectangle(64, 0, 16, 16),
                                                                                                            new Rectangle(80, 0, 16, 16),
                                                                                                            new Rectangle(96, 0, 16, 16),
                                                                                                            new Rectangle(112, 0, 16, 16)]);
Billboard explosionParticle = new Billboard(new BoundingBox(16.0, 16.0, 16.0, 8.0, 8.0, 8.0), [new Color(0.9, 0.99, 0.3), new Color(0.99, 0.8, 0.3),
new Color(0.76, 0.34, 0.1), new Color(0.34, 0.18, 0.09), new Color(0.0, 0.0, 0.0)], [new Rectangle(192, 0, 16, 16),
                                                                                     new Rectangle(208, 0, 16, 16),
                                                                                     new Rectangle(224, 0, 16, 16),
                                                                                     new Rectangle(240, 0, 16, 16),
                                                                                     new Rectangle(256, 0, 16, 16)]);

int frame = 0;
int tickCount = 0;

bool game_basic = false;
bool game_textured = false;
bool game_3d = false;
bool game_mouse = false;
bool game_asteroids = false;
bool game_aliens = false;
bool game_AI = false;
bool game_score = false;
bool game_highscore = false;
bool game_facebook = false;
bool game_sound = false;
bool game_betterSound = false;
bool game_music = false;
bool game_betterMusic = false;
bool game_particles = false;
bool game_trail = false;
bool game_nofacebook = false;
bool game_final = false;
bool isIn = true;
bool isDeath = false;
int lastUpgrade = 0;
int timesFaded = 0;
int fadeTime = 0;
int antiFadeTime = 0;
int maxCircle = 3000;
bool firstMusic = true;
bool sound_muted = false;
bool music_muted = false;
int lastCircleRadius = 700;
int score;
String queAlert = '';
bool fin = false;
String lastChange = 'Text Adventure';
List<String> changes = new List<String>();

Camera camera = new Camera();
PlayerShip playerShip;
List<Entity> entities = new List<Entity>();
DAG_Node scene;
double xAim = 0.0;
double yAim = 0.0;
double rAim = 0.0;
double zRotate = 0.0;
int shotCoolDown = 0;
int bitsGotten;
int bitsDropped;

Sound sndExplosion;
Sound sndSelect;
Sound sndHover;
Sound sndLaser;
Sound sndGetBit;
Sound sndLevelUp;
Sound sndExplosion_8;
Sound sndSelect_8;
Sound sndHover_8;
Sound sndLaser_8;
Sound sndGetBit_8;
Sound sndLevelUp_8;
Music music8Bit;
Music musicChaoz;
Music musicFuture;

     ///////////////////////////////////////////////////////////////

void tickFade(GameStates states)
{
  if(fadeTime > 0)
  {
    Element circle = querySelector("#circle");
    --fadeTime;
    if(fadeTime == 0)
    {
      if(isIn)
      {
        querySelector(".content_wrapper").style.backgroundColor = "#000000";
        querySelector("#upgradeScreen").style.display = 'none';
      }
      else
      {
        querySelector(".content_wrapper").style.backgroundColor = "#ffffff";
        canvas.style.visibility = 'hidden';
        states.currentMode = GameStates.UPGRADE_SCREEN;
        if(isDeath)
        {
          unDoButton(3);
        }
        if(game_final)
        {
          states.currentMode = GameStates.POST_GAME;
          antiFadeTime = 40;
          DivElement lineBox = querySelector("#commandLine");
          lineBox.style.visibility = 'visible';
          lineBox.style.opacity = '0.0';
          querySelector("#controlBox").style.visibility = 'hidden';
          Element circle = querySelector("#antiCircle");
          int radius = maxCircle;
          circle.style.cssText = 'display: inline-block; background: radial-gradient(circle, transparent '+radius.toString()+'px, rgba(0, 0, 0, 1) '+radius.toString()+'px); background: -o-radial-gradient(circle, transparent '+radius.toString()+'px, rgba(0, 0, 0, 1) '+radius.toString()+'px); background: -moz-radial-gradient(circle, transparent '+radius.toString()+'px, rgba(0, 0, 0, 1) '+radius.toString()+'px); background: -webkit-radial-gradient(circle, transparent '+radius.toString()+'px, rgba(0, 0, 0, 1) '+radius.toString()+'px);';
//          circle.style.display = 'inline-block';
//          circle.style.background = '-webkit-radial-gradient(circle, transparent '+radius.toString()+'px, rgba(0, 0, 0, 1) '+radius.toString()+'px);';
        }
      }
      circle.style.top = "343px";
      circle.style.left = "443px";
      circle.style.width = "14px";
      circle.style.height = "14px";
    }
    else
    {
      int radius = (isIn ? MyMath.easeIn(25-fadeTime, 25, 7, maxCircle).floor() : MyMath.easeOut(25-fadeTime, 25, maxCircle, 7).floor());
      lastCircleRadius = radius;
      circle.style.top = (350 - radius).toString() + "px";
      circle.style.left = (500 - radius - (isIn || isDeath || game_final ? 0 : 50)).toString() + "px";
      circle.style.width = (2 * radius).toString() + "px";
      circle.style.height = (2 * radius).toString() + "px";
      double factor = radius/500.0;
      if(factor < 1.5)
      {
        gl.useProgram(programBackground);
        gl.uniform1f(uniformBackgroundCircleSize, factor);
      }
      if(factor < 3.5)
      {
        gl.useProgram(programStandard);
        gl.uniform1f(uniformAlpha, max(min(factor/2.0, 1.0), 0.0));
      }
    }
  }
  if(antiFadeTime > 0)
  {
    Element circle = querySelector("#antiCircle");
    --antiFadeTime;
    if(antiFadeTime == 0)
    {
      querySelector(".content_wrapper").style.backgroundColor = "#000000";
      querySelector("#upgradeScreen").style.display = 'none';
      circle.style.display = 'none';
    }
    else
    {
      DivElement lineBox = querySelector("#commandLine");
      lineBox.style.opacity = ((40-antiFadeTime)/40).toString();
      int radius = MyMath.easeOut(40-antiFadeTime, 40, maxCircle, 0).floor();
      circle.style.cssText = 'display: inline-block; background: radial-gradient(circle, transparent '+radius.toString()+'px, rgba(0, 0, 0, 1) '+radius.toString()+'px); background: -o-radial-gradient(circle, transparent '+radius.toString()+'px, rgba(0, 0, 0, 1) '+radius.toString()+'px); background: -moz-radial-gradient(circle, transparent '+radius.toString()+'px, rgba(0, 0, 0, 1) '+radius.toString()+'px); background: -webkit-radial-gradient(circle, transparent '+radius.toString()+'px, rgba(0, 0, 0, 1) '+radius.toString()+'px);';
    }
  }
}

     ///////////////////////////////////////////////////////////////

void setButtons()
{
  List<String> texts = new List<String>();
  if(!game_basic)
  {
    texts.add("Vector Graphics");
  }
  else if(!game_final)
  {
    if(!game_mouse)
      texts.add("Mouse Support");
    if(!game_asteroids)
      texts.add("Add Asteroids");
    if(game_asteroids && !game_aliens)
      texts.add("Add Aliens");
    if(game_aliens && !game_AI)
      texts.add("Smarter Aliens");
    if(game_aliens && !game_score)
      texts.add("Score System");
    if(game_score && !game_highscore)
      texts.add("Highscore Server");
    if(game_highscore && !game_facebook && !game_nofacebook)
      texts.add("Facebook Integration");
    if(game_facebook)
      texts.add("Facebook Deintegration");
    if(game_asteroids && !game_3d && !game_textured)
      texts.add("Sprite Graphics");
    if(!game_3d && game_textured)
      texts.add("3D Graphics");
    if(game_3d && !game_textured)
      texts.add("Textured Graphics");
    if(!game_sound)
      texts.add("8Bit Sounds");
    if(game_sound && !game_betterSound)
      texts.add("Better Sounds");
    if(game_sound && !game_music)
      texts.add("8Bit Music");
    if(game_music && !game_betterMusic)
      texts.add("Better Music");
    if(!game_particles)
      texts.add("Add Particles");
    if(game_particles && !game_trail)
      texts.add("Particle Trails");
    if(game_betterMusic && game_aliens && game_3d && game_textured)
      texts.add("Publish Game");
  }

  for(int i = 1; i <= 8; ++i)
  {
    Element button = querySelector("#button"+i.toString());
    if(texts.length >= i)
    {
      button.innerHtml = texts[i-1];
      button.style.visibility = 'visible';
      querySelector("#bend"+i.toString()).style.visibility = 'visible';
      querySelector("#line"+((i+1)~/2).toString()).style.visibility = 'visible';
      querySelector("#arrow"+((i+3)~/4).toString()).style.visibility = 'visible';
    }
    else
    {
      button.style.visibility = 'hidden';
      querySelector("#bend"+i.toString()).style.visibility = 'hidden';
      if(i % 2 == 1)
        querySelector("#line"+((i+1)~/2).toString()).style.visibility = 'hidden';
      if(i % 4 == 1)
        querySelector("#arrow"+((i+3)~/4).toString()).style.visibility = 'hidden';
    }
  }
  if(game_final)
  {
    querySelector(".textBubble").style.visibility = 'hidden';
  }
}

     ///////////////////////////////////////////////////////////////

void updateControl()
{
  if(game_3d)
  {
    if(game_mouse)
    {
      querySelector('#controlText').innerHtml = 'Mouse - Aim<br />Q E - Roll<br />Space or W or Up - Thrust<br />Shift - Boost<br />Left Mouse - Fire';
    }
    else
    {
      querySelector('#controlText').innerHtml = 'W A S D or Arrows - Aim<br />Q E - Roll<br />Space - Thrust<br />Shift - Boost<br />Enter - Fire';
    }
  }
  else
  {
    if(game_mouse)
    {
      querySelector('#controlText').innerHtml = 'Mouse - Aim<br />Space or W or Up - Thrust<br />Shift - Boost<br />Left Mouse - Fire';
    }
    else
    {
      querySelector('#controlText').innerHtml = 'A D or Left Right - Rotate Ship<br />Space or W or Up - Thrust<br />Shift - Boost<br />Enter - Fire';
    }
  }
}

     ///////////////////////////////////////////////////////////////

void unDoButton(int stage)
{
  if(lastUpgrade == 1)
  {
    game_mouse = (stage == 2);
    if(stage == 3)
      updateControl();
    return;
  }
  if(lastUpgrade == 2)
  {
    game_asteroids = (stage == 2);
    return;
  }
  if(lastUpgrade == 3)
  {
    game_aliens = (stage == 2);
    return;
  }
  if(lastUpgrade == 4)
  {
    game_AI = (stage == 2);
    return;
  }
  if(lastUpgrade == 6)
  {
    game_score = (stage == 2);
    return;
  }
  if(lastUpgrade == 7)
  {
    game_highscore = (stage == 2);
    return;
  }
  if(lastUpgrade == 8)
  {
    game_facebook = (stage == 2);
    return;
  }
  if(lastUpgrade == 5)
  {
    game_facebook = true;
    game_nofacebook = false;
    return;
  }
  if(lastUpgrade == 9)
  {
    game_textured = (stage == 2);
    return;
  }
  if(lastUpgrade == 10)
  {
    game_3d = (stage == 2);
    game_textured = (stage != 2);
    if(stage == 3)
    {
      gl.useProgram(programStandard);
      matrixStack.projectionMatrix = MatrixFactory.orthogonalMatrix(0.0, 1000.0, 0.0, 700.0, 1.0, -1.0);
      matrixStack.projectionMatrix.writeToUniform(uniformPMatrix);
      updateControl();
    }
    return;
  }
  if(lastUpgrade == 11)
  {
    game_textured = (stage == 2);
    return;
  }
  if(lastUpgrade == 12)
  {
    game_sound = (stage == 2);
    if(stage == 3)
      querySelector("#soundButton").style.display = 'none';
    return;
  }
  if(lastUpgrade == 13)
  {
    game_betterSound = (stage == 2);
    return;
  }
  if(lastUpgrade == 14)
  {
    game_music = (stage == 2);
    if(stage == 3)
    {
      querySelector("#musicButton").style.display = 'none';
      Music.stop();
    }
    return;
  }
  if(lastUpgrade == 15)
  {
    game_betterMusic = (stage == 2);
    if(stage == 3)
    {
      music8Bit.play();
    }
    return;
  }
  if(lastUpgrade == 16)
  {
    game_particles = (stage == 2);
    return;
  }
  if(lastUpgrade == 17)
  {
    game_trail = (stage == 2);
    return;
  }
}

     ///////////////////////////////////////////////////////////////

void doButton(String text)
{
  lastChange = text;
  if(game_facebook && text != "Facebook Deintegration")
    context.callMethod('postToFacebook', ['I just unlocked '+text+'!']);
  if(text == "Vector Graphics")
  {
    game_basic = true;
    querySelector("#controlBox").style.visibility = 'visible';
    return;
  }
  if(text == "Mouse Support")
  {
    game_mouse = true;
    lastUpgrade = 1;
    updateControl();
    return;
  }
  if(text == "Add Asteroids")
  {
    game_asteroids = true;
    lastUpgrade = 2;
    return;
  }
  if(text == "Add Aliens")
  {
    game_aliens = true;
    lastUpgrade = 3;
    return;
  }
  if(text == "Smarter Aliens")
  {
    game_AI = true;
    lastUpgrade = 4;
    return;
  }
  if(text == "Score System")
  {
    game_score = true;
    lastUpgrade = 6;
    return;
  }
  if(text == "Highscore Server")
  {
    game_highscore = true;
    lastUpgrade = 7;
    return;
  }
  if(text == "Facebook Integration")
  {
    game_facebook = true;
    lastUpgrade = 8;
    if(!isDeath)
    {
      context.callMethod('postToFacebook', ['I just unlocked Facebook Integration!']);
    }
    return;
  }
  if(text == "Facebook Deintegration")
  {
    game_facebook = false;
    game_nofacebook = true;
    lastUpgrade = 5;
    return;
  }
  if(text == "Sprite Graphics")
  {
    game_textured = true;
    lastUpgrade = 9;
    return;
  }
  if(text == "3D Graphics")
  {
    game_3d = true;
    game_textured = false;
    gl.useProgram(programStandard);
    matrixStack.projectionMatrix = MatrixFactory.perspectiveMatrix(45, 1.428571428571429, 0.01, 6000);
    matrixStack.projectionMatrix.writeToUniform(uniformPMatrix);
    updateControl();
    lastUpgrade = 10;
    return;
  }
  if(text == "Textured Graphics")
  {
    game_textured = true;
    lastUpgrade = 11;
    return;
  }
  if(text == "8Bit Sounds")
  {
    game_sound = true;
    querySelector("#soundButton").style.display = 'inline-block';
    lastUpgrade = 12;
    return;
  }
  if(text == "Better Sounds")
  {
    game_betterSound = true;
    lastUpgrade = 13;
    return;
  }
  if(text == "8Bit Music")
  {
    game_music = true;
    querySelector("#musicButton").style.display = 'inline-block';
    lastUpgrade = 14;
    return;
  }
  if(text == "Better Music")
  {
    game_betterMusic = true;
    lastUpgrade = 15;
    return;
  }
  if(text == "Add Particles")
  {
    game_particles = true;
    lastUpgrade = 16;
    return;
  }
  if(text == "Particle Trails")
  {
    game_trail = true;
    lastUpgrade = 17;
    return;
  }
  if(text == "Publish Game")
  {
    game_final = true;
    return;
  }
}

     ///////////////////////////////////////////////////////////////

void startDeath()
{
  if(bitsGotten < 15)
  {
    isDeath = true;
    startChange();
  }
}

     ///////////////////////////////////////////////////////////////

void startChange()
{
  if(game_score)
  {
    if(score > 0)
    {
      if(game_highscore)
      {
        HttpRequest.getString('http://hitchh1k3rsguide.com/files/gitfighter/highscore.php?score='+score.toString()).then((String message){
          if(message.startsWith('scored'))
          {
            if(game_facebook)
            {
              context.callMethod('postToFacebook', ['I just '+message]);
            }
            else
            {
              queAlert = 'You '+message;
            }
          }
          else
          {
            queAlert = 'You scored '+score.toString()+' points! (There was an error accessing the highscore server.)';
          }
        });
      }
      else
      {
        queAlert = 'You scored '+score.toString()+' points!';
      }
    }
    else
    {
      queAlert = 'You didn\'t score any points this round!';
    }
  }
  isIn = false;
  if(isDeath)
    unDoButton(1);
  setButtons();
  if(isDeath)
    unDoButton(2);
  if(!isDeath && !game_final)
  {
    changes.add(lastChange);
    Element newCircle = new Element.div();
    newCircle.id = "circle"+(++timesFaded).toString();
    newCircle.classes.add("circle");
    querySelector("#circleBin").append(newCircle);
    for(int i = 0; i < timesFaded; ++i)
    {
      Element circle = querySelector("#circle"+i.toString());
      circle.style.left = (493-(50*(timesFaded-i))).toString()+"px";
      circle.title = changes[i];
    }
    Element line = querySelector("#vertLine");
    line.style.left = (500-(50*timesFaded)).toString()+"px";
    line.style.width = ((50*timesFaded)).toString()+"px";
  }
  maxCircle = window.screen.available.width;
  Element circle = querySelector("#circle");
  circle.style.top = (350 - maxCircle).toString() + "px";
  circle.style.left = (450 - maxCircle).toString() + "px";
  circle.style.width = (2 * maxCircle).toString() + "px";
  circle.style.height = (2 * maxCircle).toString() + "px";
  querySelector(".content_wrapper").style.backgroundColor = "#ffffff";
  fadeTime = 25;
  querySelector("#upgradeScreen").style.display = 'inline-block';
  gl.useProgram(programBackground);
  gl.uniform1i(uniformbackgroundIsIn, (isDeath || game_final ? 1 : 0));
}

     ///////////////////////////////////////////////////////////////

void playMusic()
{
  if(game_music && !music_muted)
  {
    if(game_final)
    {
      musicFuture.play();
    }
    else if(game_betterMusic)
    {
      if(firstMusic)
      {
        firstMusic = false;
        musicChaoz.play();
      }
      else
      {
        musicChaoz.play();
      }
    }
    else
    {
      music8Bit.play();
    }
  }
}

     ///////////////////////////////////////////////////////////////

Vec3 randomWorldPoint()
{
  double x = (random.nextDouble() * 5500) - 2750;
  double y = (random.nextDouble() * 5500) - 2750;
  if(x < 0)
    x -= 250;
  else
    x += 250;
  if(y < 0)
    y -= 250;
  else
    y += 250;
  double z = (game_3d ? ((random.nextDouble() * 6000) - 3000) : 0.0);
  x += playerShip.position.x;
  y += playerShip.position.y;
  z += playerShip.position.z;
  return new Vec3(x, y, z);
}

     ///////////////////////////////////////////////////////////////

void startWorld()
{
  isDeath = false;
  bitsGotten = 0;
  bitsDropped = 0;
  score = 0;
  List<drawable> children = new List<drawable>();
  playerShip = new PlayerShip();
  children.add(playerShip);
  entities = new List<Entity>();
  if(game_final)
  {
    KingOfBits bit = new KingOfBits();
    entities.add(bit);
    children.add(bit);
  }
  else
  {
    if(!game_asteroids)
    {
      for(int i = 0; i < 30; ++i)
      {
        Vec3 pos = randomWorldPoint();
        Bit bit = new Bit(pos);
        entities.add(bit);
        children.add(bit);
      }
    }
    if(game_asteroids)
    {
      for(int i = 0; i < (game_aliens ? 75 : 100); ++i)
      {
        Vec3 pos = randomWorldPoint();
        Asteroid asteroid = new Asteroid(pos);
        entities.add(asteroid);
        children.add(asteroid);
      }
    }
    if(game_aliens)
    {
      for(int i = 0; i < 20; ++i)
      {
        Vec3 pos = randomWorldPoint();
        UFO ufo = new UFO(pos);
        entities.add(ufo);
        children.add(ufo);
      }
    }
  }
  scene = new DAG_Node(children);
  playMusic();
}

     ///////////////////////////////////////////////////////////////

void init()
{
  context.callMethod('facebookInit');
  canvas = querySelector("#canvas");
  gl = canvas.getContext3d();
  matrixStack = new MatrixStack();
  textureCache = new TextureCache();
  gl.enable(CULL_FACE);
  gl.frontFace(CCW);
  gl.cullFace(BACK);
  gl.clearColor(0, 0, 0, 0);
  gl.blendFunc(SRC_ALPHA, ONE_MINUS_SRC_ALPHA);
  
  Sound.init();
  sndExplosion = new Sound('sounds/explosion.wav');
  sndSelect = new Sound('sounds/select.wav');
  sndHover = new Sound('sounds/hover.wav');
  sndLaser = new Sound('sounds/laser.wav');
  sndGetBit = new Sound('sounds/getbit.wav');
  sndLevelUp = new Sound('sounds/levelup.wav');
  sndExplosion_8 = new Sound('sounds/explosion_8.wav');
  sndSelect_8 = new Sound('sounds/select_8.wav');
  sndHover_8 = new Sound('sounds/hover_8.wav');
  sndLaser_8 = new Sound('sounds/laser_8.wav');
  sndGetBit_8 = new Sound('sounds/getbit_8.wav');
  sndLevelUp_8 = new Sound('sounds/levelup_8.wav');
  music8Bit = new Music('music/8bit.ogg');
  musicChaoz = new Music('music/chaoz_fantasy.ogg');
  musicFuture = new Music('music/future.ogg');  
  asteroid1 = new Geometry('entities/asteroid_large_01.json');
  asteroid2 = new Geometry('entities/asteroid_large_02.json');
  asteroid3 = new Geometry('entities/asteroid_large_03.json');
  asteroid4 = new Geometry('entities/asteroid_large_04.json');
  asteroid5 = new Geometry('entities/asteroid_large_05.json');
  crosshair = new Crosshair();
  laserBlast = new Geometry('entities/laser.json');
  ufoGeometry = new Geometry('entities/ufo.json');
  evilLaser = new Geometry('entities/evil-laser.json');
  numberSprites = textureCache.loadTexture('textures/sprites.png', null, false);

  querySelector("#soundButton").onClick.listen((MouseEvent e) {
    sound_muted = !sound_muted;
    if(sound_muted)
    {
      (querySelector("#soundButton") as ImageElement).src = 'img/noSound.png';
    }
    else
    {
      (querySelector("#soundButton") as ImageElement).src = 'img/sound.png';
    }
  });
  querySelector("#musicButton").onClick.listen((MouseEvent e) {
    music_muted = !music_muted;
    if(music_muted)
    {
      (querySelector("#musicButton") as ImageElement).src = 'img/noMusic.png';
      Music.stop();
    }
    else
    {
      (querySelector("#musicButton") as ImageElement).src = 'img/music.png';
      playMusic();
    }
  });
}

     ///////////////////////////////////////////////////////////////

void playSound(String name)
{
  if(game_sound && !sound_muted)
  {
    if(name == 'select')
    {
      if(game_betterSound)
        sndSelect.play();
      else
        sndSelect_8.play();
    }
    if(name == 'hover')
    {
      if(game_betterSound)
        sndHover.play();
      else
        sndHover_8.play();
    }
    if(name == 'explode')
    {
      if(game_betterSound)
        sndExplosion.play();
      else
        sndExplosion_8.play();
    }
    if(name == 'laser')
    {
      if(game_betterSound)
        sndLaser.play();
      else
        sndLaser_8.play();
    }
    if(name == 'getBit')
    {
      if(game_betterSound)
        sndGetBit.play();
      else
        sndGetBit_8.play();
    }
    if(name == 'lastBit')
    {
      if(game_betterSound)
        sndLevelUp.play();
      else
        sndLevelUp_8.play();
    }
  }
}

    ///////////////////////////////////////////////////////////////
    //                         GAME TICK                         //
    ///////////////////////////////////////////////////////////////

void tick(GameStates states)
{
  if(fin)
    return;
  if(queAlert != '' && fadeTime == 0 && !states.areAnyKeysPressed())
  {
    window.alert(queAlert);
    queAlert = '';
  }
  if(states.currentMode == GameStates.TEXT_GAME)
  {
    textTick(states);
  }
  if(states.currentMode == GameStates.GRAPHIC_GAME)
  {
    graphicGameTick(states);
  }
  if(states.currentMode == GameStates.UPGRADE_SCREEN)
  {
    upgradeTick(states);
  }
  if(states.currentMode == GameStates.POST_GAME)
  {
    postGameTick(states);
  }
}

void textTick(GameStates states)
{
  if(states.keyPress(13))
  {
    DivElement lineBox = querySelector("#commandLine");
    DivElement commandLine = querySelector("#CMD");
    InputElement textBox = querySelector("#CMD_Input");
    String text = textBox.value.toLowerCase();
    if(text != '')
    {
      commandLine.appendHtml('<br />> ' + text);
      textBox.value = '';
      lineBox.scrollTop = lineBox.scrollHeight;
      if((text.contains('get') || text.contains('git') || text.contains('collect') || text.contains('take') || text.contains('use') || text.contains('look') || text.contains('pick') || text.contains('grab')) &&
          (text.contains('bit') || text.contains('them')))
      {
        commandLine.appendHtml('<br />...');
        querySelector("#CMD_Input_line").style.display = 'none';
        startChange();
      }
      else if((text.contains('sit') || text.contains('lay') || text.contains('sleep')) &&
          (text.contains('bit') || text.contains('them')))
      {
        commandLine.appendHtml('<br />That wasn\'t very comfortable.');
      }
      else if(text.contains('help'))
      {
        commandLine.appendHtml('<br />You have to type something! Syntax is like: \'Sit on bits!\' or \'Get Elvish Sword!\'');
      }
      else if(text.contains('get') || text.contains('git') || text.contains('collect') || text.contains('take') || text.contains('pick') || text.contains('grab'))
      {
        commandLine.appendHtml('<br />Get what?');
      }
      else if(text.contains('use'))
      {
        commandLine.appendHtml('<br />Use what?');
      }
      else if(text.contains('look'))
      {
        commandLine.appendHtml('<br />Look at what?');
      }
      else
      {
        commandLine.appendHtml('<br />You\'re not sure how to "' + text + '" Maybe you should type \'Help\'');
      }
    }
  }
  if(fadeTime == 1)
  {
    DivElement lineBox = querySelector("#commandLine");
    lineBox.style.visibility = 'hidden';
  }
  else if(fadeTime > 1)
  {
    DivElement lineBox = querySelector("#commandLine");
    lineBox.style.opacity = (fadeTime/25).toString();
  }
  tickFade(states);
}

void postGameTick(GameStates states)
{
  if(antiFadeTime == 0)
  {
    if(--creditsCooldown <= 0)
    {
      creditsCooldown = 1;
      String character = CREDITS.substring(creditsIndex, creditsIndex+1);
      if(character == '|')
      {
        creditsCooldown = 5;
      }
      else
      {
        if(character == '\n')
        {
          character = '<br />';
        }
        if(character == '<')
        {
          int newIndex = creditsIndex;
          bool first = true;
          while(character != '>' || first)
          {
            if(character == '>')
              first = false;
            ++newIndex;
            character = CREDITS.substring(newIndex, newIndex+1);
          }
          character = CREDITS.substring(creditsIndex, newIndex+1);
          creditsIndex = newIndex;
        }
        if(character == ' ')
          character = '&nbsp;';
        DivElement commandLine = querySelector("#CMD");
        commandLine.appendHtml(character);
      }
      DivElement lineBox = querySelector("#commandLine");
      lineBox.scrollTop = lineBox.scrollHeight;
      if(++creditsIndex >= CREDITS.length)
      {
        fin = true;
      }
    }
  }
  else
  {
    tickFade(states);
  }
}

void upgradeTick(GameStates states)
{
  int btn = states.upgradePressed(); 
  if(btn != 0)
  {
    doButton(querySelector("#button"+btn.toString()).innerHtml);
    playSound('select');
    startWorld();
    isIn = true;
    states.currentMode = GameStates.GRAPHIC_GAME;
    maxCircle = window.screen.available.width;
    canvas.style.visibility = 'visible';
    fadeTime = 25;
    gl.useProgram(programBackground);
    gl.uniform1i(uniformbackgroundIsIn, (isDeath ? 0 : 1));
  }
  if(states.upgradeHovered())
  {
    playSound('hover');
  }
}

void graphicGameTick(GameStates states)
{
  tickFade(states);
  ++tickCount;
  camera.tick();
  playerShip.setCamera();
  if(shotCoolDown > 0)
    --shotCoolDown;
  scene.tick(0);
  playerShip.tick();
  for(Entity entity in entities.toList())
  {
    if(entity.tick())
    {
      scene.nodes.remove(entity);
      entities.remove(entity);
    }
  }
  if(game_final)
  {
    bitsGotten = random.nextInt(16);
  }

  if(states.isKeyDown(32) || ((game_mouse || !game_3d) && (states.isKeyDown(38) || states.isKeyDown(87)))) // SPACE BAR || UP - W
  {
    if(game_3d)
    {
      Vec3 direction = new Vec3(5.0, 0.0, 0.0)..w = 0.0;
      if(states.isKeyDown(16)) // SHIFT
      {
        direction.x = 10.0;
      }
      direction.multiply(playerShip.node.transform);
      playerShip.velocity += direction;
    }
    else
    {
      double deltaX = cos(zRotate);
      double deltaY = sin(zRotate);
      double speed = 7.0;
      if(states.isKeyDown(16)) // SHIFT
      {
        speed = 13.0;
      }
      playerShip.velocity.x += deltaX * speed;
      playerShip.velocity.y += deltaY * speed;
    }
  }
  if(game_3d)
  {
    double xOffset = 0.0;
    double yOffset = 0.0;
    double mag = playerShip.velocity.magnitude();
    if(game_mouse)
    {
      xOffset = min((states.mousePoint.x - 500.0).abs(), 500.0) * (states.mousePoint.x > 500.0 ? -1.0 : 1.0);
      yOffset = min((states.mousePoint.y - 350.0).abs(), 350.0) * (states.mousePoint.y > 350.0 ? 1.0 : -1.0);
    }
    else
    {
      if(states.isKeyDown(37) || states.isKeyDown(65)) // LEFT - A
      {
        xAim = min(xAim + 0.2, 1.0);
      }
      if(states.isKeyDown(39) || states.isKeyDown(68)) // RIGHT - D
      {
        xAim = max(xAim - 0.2, -1.0);
      }
      xAim *= 0.8;
      xOffset = 400.0 * xAim;
      if(states.isKeyDown(38) || states.isKeyDown(87)) // UP - W
      {
        yAim = max(yAim - 0.2, -1.0);
      }
      if(states.isKeyDown(40) || states.isKeyDown(83)) // DOWN - S
      {
        yAim = min(yAim + 0.2, 1.0);
      }
      yAim *= 0.8;
      yOffset = 300.0 * yAim;
    }
    if(states.isKeyDown(16)) // SHIFT
    {
      mag *= 0.5;
    }
    xOffset *= mag;
    yOffset *= mag;
    crosshair.aimMatrix = new Matrix4x3.identity();
    if(states.isKeyDown(81)) // Q
    {
      rAim = max(rAim - 0.2, -1.0);
    }
    if(states.isKeyDown(69)) // E
    {
      rAim = min(rAim + 0.2, 1.0);
    }
    rAim *= 0.8;
    Matrix4x3 roll = MatrixFactory.rotationMatrix(0.01 * rAim * mag, 1.0, 0.0, 0.0); // '' DO A BARREL ROLL! ''
    crosshair.aimMatrix.multiply(roll);
    playerShip.node.transform.multiply(roll);

    Matrix4x3 turn = MatrixFactory.rotationMatrix((xOffset / 150000.0), 0.0, 0.0, 1.0);
    crosshair.aimMatrix.multiply(turn);
    playerShip.node.transform.multiply(turn);

    Matrix4x3 pitch = MatrixFactory.rotationMatrix((yOffset / 150000.0), 0.0, 1.0, 0.0);
    crosshair.aimMatrix.multiply(pitch);
    playerShip.node.transform.multiply(pitch);
  }
  else
  {
    if(game_mouse)
    {
      double mouseX = states.mousePoint.x - 500.0;
      double mouseY = states.mousePoint.y - 350.0;
      playerShip.node.transform = MatrixFactory.translationMatrix(playerShip.position.x, playerShip.position.y, playerShip.position.z);
      zRotate = MyMath.pointToAngle(mouseX, mouseY);
      playerShip.node.transform.multiply(MatrixFactory.rotationMatrix(zRotate, 0.0, 0.0, 1.0));
      crosshair.position.x = sqrt((mouseX * mouseX) + (mouseY * mouseY));
    }
    else
    {
      if(states.isKeyDown(37) || states.isKeyDown(65)) // LEFT - A
      {
        zRotate -= 0.15;
      }
      if(states.isKeyDown(39) || states.isKeyDown(68)) // RIGHT - D
      {
        zRotate += 0.15;
      }
      playerShip.node.transform = MatrixFactory.translationMatrix(playerShip.position.x, playerShip.position.y, playerShip.position.z);
      playerShip.node.transform.multiply(MatrixFactory.rotationMatrix(zRotate, 0.0, 0.0, 1.0));
    }
  }
  if(game_mouse)
  {
    if(states.mousePress(0) || states.mouseRepeat(0)) // LEFT CLICK
    {
      if(shotCoolDown == 0)
      {
        playSound('laser');
        score -= 1;
        LaserBlast newEntity = new LaserBlast();
        scene.nodes.add(newEntity);
        entities.add(newEntity);
        shotCoolDown = 4;
      }
    }
  }
  else
  {
    if(states.keyPress(13) || states.keyRepeat(13)) // ENTER
    {
      if(shotCoolDown == 0)
      {
        playSound('laser');
        score -= 1;
        LaserBlast newEntity = new LaserBlast();
        scene.nodes.add(newEntity);
        entities.add(newEntity);
        shotCoolDown = 4;
      }
    }
  }
  if(DEBUG && states.keyPress(53))
  {
    startChange();
  }
}

     ///////////////////////////////////////////////////////////////

void drawNumbers()
{
  int p = 0;
  for(int i = 1; i < 16; i *= 2)
  {
    bool isOne = ((bitsGotten & i) > 0);
    gl.uniform1f(uniformGUIXOffset, 1000.0-(16.0*++p));
    gl.uniform1f(uniformGUIYOffset, 0.0);
  
    gl.activeTexture(TEXTURE0);
    gl.bindTexture(TEXTURE_2D, numberSprites);
    gl.uniform1i(uniformGUISpriteSampler, 0);
    
    gl.enableVertexAttribArray(attribGUIVertexPosition);
    gl.bindBuffer(ARRAY_BUFFER, numberRectBuffer);
    gl.vertexAttribPointer(attribGUIVertexPosition, 2, FLOAT, false, 0, 0);
    
    gl.enableVertexAttribArray(attribGUIVertexTextureCoord);
    gl.bindBuffer(ARRAY_BUFFER, (isOne ? number1UVBuffer : number0UVBuffer));
    gl.vertexAttribPointer(attribGUIVertexTextureCoord, 2, FLOAT, false, 0, 0);
    
    gl.drawArrays(TRIANGLES, 0, 6);
    gl.disableVertexAttribArray(attribGUIVertexPosition);
    gl.disableVertexAttribArray(attribGUIVertexTextureCoord);
  }
}

     ///////////////////////////////////////////////////////////////
     //                         GAME DRAW                         //
     ///////////////////////////////////////////////////////////////

void draw(GameStates states, double partialTickTime)
{
  if(states.currentMode != GameStates.GRAPHIC_GAME)
    return;

  ++frame;
  gl.clear(COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT);

  // DRAW BACGROUND
  gl.disable(DEPTH_TEST);
  gl.disable(BLEND);
  gl.useProgram(programBackground);

  camera.getMatrix(partialTickTime).writeToUniform(uniformBackgroundVMatrix);
  gl.enableVertexAttribArray(attribBackgroundVertex);
  gl.bindBuffer(ARRAY_BUFFER, screenRectBuffer);
  gl.vertexAttribPointer(attribBackgroundVertex, 2, FLOAT, false, 0, 0);
  gl.uniform1i(uniformBackgroundRender3D, game_3d ? 1 : 0);
  gl.uniform1i(uniformBackgroundUseTextures, game_textured ? 1 : 0);
  gl.drawArrays(TRIANGLES, 0, 6);
  gl.disableVertexAttribArray(attribBackgroundVertex);

  // DRAW SCENE
  if(game_3d)
    gl.enable(DEPTH_TEST);
  gl.enable(BLEND);
  gl.useProgram(programStandard);
  matrixStack.viewMatrix = camera.getMatrix(partialTickTime).inverse();
  matrixStack.viewMatrix.writeToUniform(uniformVMatrix);
  gl.uniform1i(uniformRender3D, game_3d ? 1 : 0);
  gl.uniform1i(uniformUseTexture, game_textured ? 1 : 0);
  scene.draw(partialTickTime);

  // DRAW GUI
  if(fadeTime == 0 || lastCircleRadius > 610)
  {
    gl.disable(DEPTH_TEST);
    gl.useProgram(programGUI);
    drawNumbers();  
  }
}

     ///////////////////////////////////////////////////////////////

main()
{
  if(!(window.navigator.userAgent.contains('Chrome') || window.navigator.userAgent.contains('Opera')))
  {
    querySelector("#noChrome").style.display = 'inline-block';
  }
  init();
  querySelector("#CMD_Input").focus();
  Future tickTimer;
  int lastTime = new DateTime.now().millisecondsSinceEpoch;
  GameStates states = new GameStates(20);
  int partialTickTime = 0;

  void loop()
  { 
    // frame time calcs
    int time = new DateTime.now().millisecondsSinceEpoch;
    Duration frameTime = new Duration(milliseconds: time - lastTime);
    lastTime = time;

    // tick
    int maxTickCounter = 100;
    partialTickTime += frameTime.inMilliseconds;
    if(partialTickTime > 1000~/TICKRATE)
    {
      states._poll();
    }
    while(partialTickTime > 1000~/TICKRATE)
    {
      if(--maxTickCounter <= 0)
      {
        print('Game Engine cannot keep up, reseting tick counter in hopes of recovering.');
        partialTickTime = 1000 ~/ TICKRATE;
      }
      partialTickTime -= 1000 ~/ TICKRATE;
      tick(states);
      states._postTick();
    }

    // render
    draw(states, partialTickTime * TICKRATE / 1000.0 );

    // schedule next frame
    int renderTime = new DateTime.now().millisecondsSinceEpoch - lastTime;
    tickTimer = new Future.delayed(new Duration(milliseconds: 16 - renderTime), loop);
  }
  
  loadProgram('shaders/background-vertex-shader.txt', 'shaders/background-fragment-shader.txt', (Program prog) {
    programBackground = prog;
    gl.useProgram(programBackground);
    attribBackgroundVertex = gl.getAttribLocation(programBackground, 'aVertexPosition');
    uniformBackgroundVMatrix = gl.getUniformLocation(programBackground, 'uVMatrix');
    uniformBackgroundRender3D = gl.getUniformLocation(programBackground, 'uRender3D');
    uniformBackgroundUseTextures = gl.getUniformLocation(programBackground, 'uUseTextures');
    uniformBackgroundAspect = gl.getUniformLocation(programBackground, 'uAspect');
    uniformBackgroundCircleSize = gl.getUniformLocation(programBackground, 'uCircleSize');
    uniformbackgroundIsIn = gl.getUniformLocation(programBackground, 'uIsIn');
    screenRectBuffer = gl.createBuffer();
    gl.bindBuffer(ARRAY_BUFFER, screenRectBuffer);
    gl.bufferDataTyped(ARRAY_BUFFER, new Float32List.fromList([-1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0]), STATIC_DRAW);
    gl.uniform1f(uniformBackgroundAspect, 1.428571428571429);
    gl.uniform1f(uniformBackgroundCircleSize, 1.5);

    loadProgram('shaders/GUI-vertex-shader.txt', 'shaders/GUI-fragment-shader.txt', (Program prog) {
      programGUI = prog;
      gl.useProgram(programGUI);
      attribGUIVertexPosition = gl.getAttribLocation(programGUI, 'aVertexPosition');
      attribGUIVertexTextureCoord = gl.getAttribLocation(programGUI, 'aVertexTextureCoord');
      uniformGUISpriteSampler = gl.getUniformLocation(programGUI, 'uSpriteSampler');
      uniformGUIXOffset = gl.getUniformLocation(programGUI, 'uXOff');
      uniformGUIYOffset = gl.getUniformLocation(programGUI, 'uYOff');
      numberRectBuffer = gl.createBuffer();
      gl.bindBuffer(ARRAY_BUFFER, numberRectBuffer);
      gl.bufferDataTyped(ARRAY_BUFFER, new Float32List.fromList([0.0, 16.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 16.0, 16.0, 16.0, 0.0]), STATIC_DRAW);
      number0UVBuffer = gl.createBuffer();
      gl.bindBuffer(ARRAY_BUFFER, number0UVBuffer);
      gl.bufferDataTyped(ARRAY_BUFFER, new Float32List.fromList(Geometry.uvBoxList(0.0009765625, 0.001953125, 0.0302734375, 0.060546875)), STATIC_DRAW);
      number1UVBuffer = gl.createBuffer();
      gl.bindBuffer(ARRAY_BUFFER, number1UVBuffer);
      gl.bufferDataTyped(ARRAY_BUFFER, new Float32List.fromList(Geometry.uvBoxList(0.0322265625, 0.001953125, 0.0615234375, 0.060546875)), STATIC_DRAW);
      loadProgram('shaders/standard-vertex-shader.txt', 'shaders/standard-fragment-shader.txt', (Program prog) {
        programStandard = prog;
        gl.useProgram(programStandard);
        attribVertexPosition = gl.getAttribLocation(programStandard, 'aVertexPosition');
        attribVertexNormal = gl.getAttribLocation(programStandard, 'aVertexNormal');
        attribVertexTextureCoord = gl.getAttribLocation(programStandard, 'aVertexTextureCoord');
        uniformMMatrix = gl.getUniformLocation(programStandard, 'uMMatrix');
        uniformPMatrix = gl.getUniformLocation(programStandard, 'uPMatrix');
        uniformVMatrix = gl.getUniformLocation(programStandard, 'uVMatrix');
        uniformRender3D = gl.getUniformLocation(programStandard, 'uRender3D');
        uniformUseTexture = gl.getUniformLocation(programStandard, 'uUseTexture');
        uniformRed = gl.getUniformLocation(programStandard, 'uRed');
        uniformGreen = gl.getUniformLocation(programStandard, 'uGreen');
        uniformBlue = gl.getUniformLocation(programStandard, 'uBlue');
        uniformSpriteSampler = gl.getUniformLocation(programStandard, 'uSpriteSampler');
        uniformDiffuseSampler = gl.getUniformLocation(programStandard, 'uDiffuseSampler');
        uniformEmissiveSampler = gl.getUniformLocation(programStandard, 'uEmissiveSampler');
        uniformAlpha = gl.getUniformLocation(programStandard, 'uAlpha');
        matrixStack.projectionMatrix = MatrixFactory.orthogonalMatrix(0.0, 1000.0, 0.0, 700.0, 1.0, -1.0);
        matrixStack.projectionMatrix.writeToUniform(uniformPMatrix);
        gl.uniform1f(uniformAlpha, 1.0);
        loop();
      });
    });
  });
}